plugins{
	id 'java-library'
	id 'maven-publish'
	id 'signing'
	id 'eclipse'
	id 'com.github.spotbugs' version '5.0.14'
}

sourceSets{
	main{
		java.srcDirs = ['src']
		resources.srcDirs = ['resources']
	}
}

repositories{
	//Local cache
	if(project.hasProperty("nexusPublic")){
		maven{
			allowInsecureProtocol = true
			url "$nexusPublic"
		}
	}
	mavenCentral();
}

eclipse.classpath.downloadSources = true
eclipse.classpath.downloadJavadoc = true
compileJava.options.encoding = 'UTF-8'
sourceCompatibility = 1.8
javadoc.options.memberLevel = JavadocMemberLevel.PRIVATE

spotbugs{
	showProgress = true
	effort = 'max'
	reportLevel = 'low'
	excludeFilter = file("exclude.xml")
}

spotbugsMain{
	reports{
		html{
			required = true
			outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
			stylesheet = 'fancy-hist.xsl'
		}
	}
}

java{
	withSourcesJar()
	withJavadocJar()
}

group = 'dev.roanh.util'
version = project.hasProperty("releaseVersion") ? releaseVersion : 'SNAPSHOT'

publishing{
	publications{
		mavenJava(MavenPublication){
			from components.java
			artifactId = 'util'

			pom{
				name = project.eclipse.project.name
				description = 'Utilities library for public projects'
				url = 'https://github.com/RoanH/Util'
				licenses{
					license{
						name = 'GNU General Public License v3.0'
						url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
					}
				}
				developers{
					developer{
						id = 'RoanH'
						name = 'Roan Hofland'
						email = 'roan@roanh.dev'
					}
				}
				scm{
					connection = 'scm:git:git@github.com:RoanH/Util.git'
					developerConnection = 'scm:git:git@git.roanh.dev:roan/util.git'
					url = 'https://github.com/RoanH/Util'
				}
			}
		}
	}

	repositories{
		maven{
			url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
			credentials{
				username findProperty("OSSRH_USER")
				password findProperty("OSSRH_PASS")
			}
		}
	}
}

jar{
	into("META-INF/maven/$project.group/$project.publishing.publications.mavenJava.artifactId"){
		from{
			generatePomFileForMavenJavaPublication
		}
		rename ".*", "pom.xml"
	}
}

signing{
	useInMemoryPgpKeys(findProperty("signingKeyId"), findProperty("signingKey"), findProperty("signingPassword"))
	sign publishing.publications.mavenJava
}
